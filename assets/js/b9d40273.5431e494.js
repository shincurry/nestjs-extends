"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[660],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,k=u["".concat(d,".").concat(c)]||u[c]||m[c]||i;return a?n.createElement(k,o(o({ref:t},s),{},{components:a})):n.createElement(k,o({ref:t},s))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},4221:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:3},o="Validation",l={unversionedId:"validation",id:"validation",title:"Validation",description:"For validation of network request payload, Nest.js officially recommends using class-validator with Pipe to implement the validation feature .",source:"@site/docs/3.validation.md",sourceDirName:".",slug:"/validation",permalink:"/nestjs-extends/docs/validation",draft:!1,editUrl:"https://github.com/shincurry/nestjs-extends/tree/main/website/docs/docs/3.validation.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Module",permalink:"/nestjs-extends/docs/module"},next:{title:"Entrypoint",permalink:"/nestjs-extends/docs/entrypoint"}},d={},p=[{value:"Validation using Yup",id:"validation-using-yup",level:2},{value:"Example",id:"example",level:4},{value:"Validation using Zod",id:"validation-using-zod",level:2}],s={toc:p},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"validation"},"Validation"),(0,r.kt)("p",null,"For validation of network request payload, Nest.js officially recommends using ",(0,r.kt)("inlineCode",{parentName:"p"},"class-validator")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"Pipe")," to implement the validation feature ",(0,r.kt)("sup",{parentName:"p",id:"fnref-1"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"class-validator")," requires you to define a corresponding ",(0,r.kt)("inlineCode",{parentName:"p"},"class/DTO")," for each data object that needs to be validated, which can make things cumbersome if the data object has multiple layers of nested structures."),(0,r.kt)("p",null,"And if you write DTOs just to validate the request payload, the DTOs are a bit redundant, because after all, the type of request payload may not be the same as the one actually used in service, you need to do further processing of the payload into the required type structure in service."),(0,r.kt)("h2",{id:"validation-using-yup"},"Validation using Yup"),(0,r.kt)("p",null,"Nest.js Extends Toolkit provides a set of decorators based on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jquense/yup"},"Yup")," for request payload validation."),(0,r.kt)("p",null,"To begin using it, we first install the required dependency."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save yup\n")),(0,r.kt)("p",null,"Depending on your needs, you can use different decorators:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Decorator"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Source"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@YupValidatedBody(schema: Yup.ObjectSchema)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"req.body"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@YupValidatedParam(key: string, schema: Yup.Schema)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"req.params[key]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@YupValidatedParams(schema: Yup.Schema)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"req.params"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@YupValidatedQuery(key: string, schema: Yup.Schema)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"req.query[key]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@YupValidatedQueries(schema: Yup.Schema)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"req.query"))))),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Controller, Get, Post } from '@nestjs/common';\nimport { YupValidatedBody, YupValidatedParam, YupValidatedParams, YupValidatedQueries, YupValidatedQuery } from 'nestjs-extends';\nimport * as Yup from 'yup';\n\nconst GetCatsParamsValidation = Yup.object({\n  roomId: Yup.number().integer().required(),\n}).required()\n\nconst CatColorValidation = Yup.string().required().oneOf(['white', 'black', 'blue'])\nconst GetCatsQueriesValidation = Yup.object({\n  color: CatColorValidation,\n  age: Yup.number().integer().required(),\n}).required()\n\nconst AddCatBodyValidation = Yup.object({\n  name: Yup.string().required(),\n  color: CatColorValidation,\n  age: Yup.number().integer().required(),\n}).required()\n\n@Controller()\nexport class CatsController {\n  @Get('/rooms/:roomId/cats')\n  getCats(\n    @YupValidatedParam('roomId', Yup.number().integer().required()) roomId: number,\n    @YupValidatedParams(GetCatsParamsValidation.required()) params: Yup.InferType<typeof GetCatsParamsValidation>,\n    @YupValidatedQuery('color', CatColorValidation.required()) color: Yup.InferType<typeof CatColorValidation>,\n    @YupValidatedQueries(GetCatsQueriesValidation) queries: Yup.InferType<typeof GetCatsQueriesValidation>,\n  ): string {\n    return 'This action returns cats';\n  }\n\n  @Post('/rooms/:roomId/cats')\n  addCat(\n    @YupValidatedParam('roomId', Yup.number().integer().required()) roomId: number,\n    @YupValidatedBody(AddCatBodyValidation) body: Yup.InferType<typeof AddCatBodyValidation>,\n  ): string {\n    return 'This action add new cat to room';\n  }\n}\n")),(0,r.kt)("h2",{id:"validation-using-zod"},"Validation using Zod"),(0,r.kt)("p",null,"Nest.js Extends Toolkit also provides a set of decorators based on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/colinhacks/zod"},"Zod")," for request payload validation."),(0,r.kt)("p",null,"To begin using it, we first install the required dependency."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save zod\n")),(0,r.kt)("p",null,"Depending on your needs, you can use different decorators:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Decorator"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Source"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@ZodValidatedBody(schema: z.ZodObject)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"req.body"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@ZodValidatedParam(key: string, schema: z.ZodType)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"req.params[key]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@ZodValidatedParams(schema: z.ZodObject)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"req.params"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@ZodValidatedQuery(key: string, schema: z.ZodType)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"req.query[key]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@ZodValidatedQueries(schema: z.ZodObject)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"req.query"))))),(0,r.kt)("p",null,"It is similar to Yup based decorators, please refer to the examples above."),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1"},(0,r.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/techniques/validation"},"Validation | NestJS - A progressive Node.js framework"),(0,r.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0}}]);