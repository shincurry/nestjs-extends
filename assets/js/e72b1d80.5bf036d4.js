"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[244],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3871:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:5},i="Caching",c={unversionedId:"caching",id:"caching",title:"Caching",description:"The CacheModule provided by Nest.js is actually a simple wrapper for the node-cache-manager.",source:"@site/docs/5.caching.md",sourceDirName:".",slug:"/caching",permalink:"/nestjs-extends/docs/caching",draft:!1,editUrl:"https://github.com/shincurry/nestjs-extends/tree/main/website/docs/docs/5.caching.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Entrypoint",permalink:"/nestjs-extends/docs/entrypoint"}},l={},s=[{value:"Mutiple Individual caches",id:"mutiple-individual-caches",level:3},{value:"NamedCacheModule",id:"namedcachemodule",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"caching"},"Caching"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheModule")," provided by Nest.js is actually a simple wrapper for the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/node-cache-manager/node-cache-manager"},(0,r.kt)("inlineCode",{parentName:"a"},"node-cache-manager")),". ",(0,r.kt)("sup",{parentName:"p",id:"fnref-1"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,r.kt)("h3",{id:"mutiple-individual-caches"},"Mutiple Individual caches"),(0,r.kt)("p",null,"In terms of the implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheModule"),", it is not designed with multi-instance usage. For example, if you need a data cache that connects to Redis and a file cache that adapts to the file system, there is no way to get cache instances for different connections if you follow the official documentation."),(0,r.kt)("p",null,"But actually there is a way to do it. you can declare two additional modules: ",(0,r.kt)("inlineCode",{parentName:"p"},"DataCacheModule")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"FileCacheModule")," and import the ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheModule")," inside it, then re-export ",(0,r.kt)("inlineCode",{parentName:"p"},"Cache")," under a different token (so there are no conflicts, you inject ",(0,r.kt)("inlineCode",{parentName:"p"},"Cache")," instance with different token)."),(0,r.kt)("h3",{id:"namedcachemodule"},"NamedCacheModule"),(0,r.kt)("p",null,"According to above, Nest.js Extends Toolkit provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"NamedCacheModule"),", it's a simple wrapper for ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheModule")," with an additional method parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", this parameter is used to specify the token of the re-exported cache instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Module } from '@nestjs/common';\nimport { NamedCacheModule } from 'nestjs-extends';\n\nexport const CUSTOM_CACHE_MANAGER = Symbol(\"CUSTOM_CACHE_MANAGER\");\n\n@Module({\n  imports: [\n    NamedCacheModule.registerAsync(CUSTOM_CACHE_MANAGER, {\n      useFactory: () => {\n        return {\n          max: 100,\n          ttl: 10 * 1000,\n        }\n      },\n    }),\n  ]\n})\nexport class CustomCacheModule {}\n")),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1"},(0,r.kt)("a",{parentName:"li",href:"https://docs.nestjs.com/techniques/caching"},"Caching | NestJS - A progressive Node.js framework"),(0,r.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0}}]);